From 582f290eb5c706d3e9c9dae4f4fa87c09db7cdab Mon Sep 17 00:00:00 2001
Date: Sat, 18 Jun 2022 17:07:41 +0100
Subject: [PATCH 1/2] Server patch

---
 barretenberg/src/aztec/ecc/groups/element.hpp |   2 +-
 barretenberg/task_lib.cpp                     | 129 ++++++++++++++++++
 2 files changed, 130 insertions(+), 1 deletion(-)
 create mode 100644 barretenberg/task_lib.cpp

diff --git a/barretenberg/src/aztec/ecc/groups/element.hpp b/barretenberg/src/aztec/ecc/groups/element.hpp
index 188e54ce..7217a9f4 100644
--- a/barretenberg/src/aztec/ecc/groups/element.hpp
+++ b/barretenberg/src/aztec/ecc/groups/element.hpp
@@ -89,10 +89,10 @@ template <class Fq, class Fr, class Params> class alignas(32) element {
     Fq y;
     Fq z;
 
-  private:
     element mul_without_endomorphism(const Fr& exponent) const noexcept;
     element mul_with_endomorphism(const Fr& exponent) const noexcept;
 
+  private:
     template <typename = typename std::enable_if<Params::can_hash_to_curve>>
     static element random_coordinates_on_curve(numeric::random::Engine* engine = nullptr) noexcept;
     // {
diff --git a/barretenberg/task_lib.cpp b/barretenberg/task_lib.cpp
new file mode 100644
index 00000000..db33d992
--- /dev/null
+++ b/barretenberg/task_lib.cpp
@@ -0,0 +1,129 @@
+#include <ecc/curves/bn254/g1.hpp>
+#include <crypto/hashers/hashers.hpp>
+#include <crypto/aes128/aes128.hpp>
+#include <crypto/sha256/sha256.hpp>
+#include <sstream>
+using namespace barretenberg;
+struct ServerState {
+    g1::affine_element publicKey;
+    fr privateKey;
+    uint8_t sessionEncryptionKey[32];
+    uint8_t sessionMACKey[32];
+};
+
+extern "C" ServerState* initializeState(uint256_t* pPrivateKey)
+{
+    ServerState* serverState = new ServerState();
+    serverState->privateKey = fr(*pPrivateKey);
+    serverState->publicKey = g1::affine_element(g1::one * serverState->privateKey);
+    return serverState;
+}
+
+extern "C" void deleteState(ServerState* pServerState)
+{
+    delete pServerState;
+}
+
+extern "C" void getPublicKey(ServerState* pServerState, uint8_t* pOutputBuffer)
+{
+    *((uint256_t*)pOutputBuffer) = pServerState->publicKey.x;
+
+    *((uint256_t*)(pOutputBuffer + sizeof(uint256_t))) = pServerState->publicKey.y;
+}
+extern "C" bool createSession(ServerState* pServerState, uint8_t* pPointCoordinates, char* pErrorMessage)
+{
+    std::stringstream errorStream;
+    fq clientPointX(*(uint256_t*)(pPointCoordinates)),
+        clientPointY(*(uint256_t*)(pPointCoordinates + sizeof(uint256_t)));
+    g1::affine_element clientPoint(clientPointX, clientPointY);
+    if (!clientPoint.on_curve()) {
+        errorStream << "Input point " << clientPoint << " is not on curve" << std::endl;
+        strcpy(pErrorMessage, errorStream.str().c_str());
+        return false;
+    }
+    g1::affine_element sharedPoint = g1::affine_element(
+        g1::element(clientPoint * fr(2)).mul_without_endomorphism(pServerState->privateKey * fr(2).invert()));
+    if (!sharedPoint.on_curve()) {
+
+        std::cout << "Shared: " << sharedPoint << std::endl;
+        errorStream << "Shared point " << sharedPoint << " is not on curve" << std::endl;
+        strcpy(pErrorMessage, errorStream.str().c_str());
+
+        return false;
+    }
+    uint256_t sharedPointX(sharedPoint.x), sharedPointY(sharedPoint.y);
+    std::vector<uint8_t> hasherInput;
+    std::vector<uint8_t> temp;
+    for (size_t i = 0; i < sizeof(uint256_t); i++) {
+        hasherInput.push_back(((uint8_t*)(&sharedPointX.data[0]))[i]);
+    }
+    for (size_t i = 0; i < sizeof(uint256_t); i++) {
+        hasherInput.push_back(((uint8_t*)(&sharedPointY.data[0]))[i]);
+    }
+    temp.insert(temp.begin(), hasherInput.begin(), hasherInput.end());
+    temp.push_back(0);
+    auto encryptionKey = Sha256Hasher::hash(temp);
+    temp.pop_back();
+    temp.push_back(1);
+    auto macKey = Sha256Hasher::hash(temp);
+
+    memcpy(pServerState->sessionEncryptionKey, encryptionKey.data(), 32);
+    memcpy(pServerState->sessionMACKey, macKey.data(), 32);
+    return true;
+}
+
+extern "C" bool decryptWithSessionKey(ServerState* pServerState,
+                                      uint8_t* pIV,
+                                      uint8_t* pInputBuffer,
+                                      uint8_t* pOutputBuffer,
+                                      size_t bufferSize,
+                                      uint8_t* pMAC)
+{
+    std::vector<uint8_t> encrypted;
+    encrypted.reserve(bufferSize);
+    for (size_t i = 0; i < bufferSize; i++) {
+        encrypted.push_back(*(pInputBuffer + i));
+    }
+    auto encrypted_hash_bytes = Sha256Hasher::hash(encrypted);
+    for (size_t i = 0; i < bufferSize; i++) {
+        encrypted_hash_bytes.push_back(pServerState->sessionMACKey[i]);
+    }
+    auto mac = Sha256Hasher::hash(encrypted_hash_bytes);
+    if (memcmp(pMAC, mac.data(), 32)) {
+        return false;
+    }
+    if (bufferSize < 16) {
+        return false;
+    }
+    memcpy(pOutputBuffer, pInputBuffer, bufferSize);
+    crypto::aes128::decrypt_buffer_cbc(pOutputBuffer, pIV, pServerState->sessionEncryptionKey, bufferSize);
+    return true;
+}
+
+extern "C" bool encryptWithSessionKey(ServerState* pServerState,
+                                      uint8_t* pIV,
+                                      uint8_t* pInputBuffer,
+                                      uint8_t* pOutputBuffer,
+                                      size_t bufferSize,
+                                      uint8_t* pMAC)
+{
+    uint8_t ivCopy[16];
+    if (bufferSize < 16) {
+        return false;
+    }
+    memcpy(ivCopy, pIV, 16);
+    memcpy(pOutputBuffer, pInputBuffer, bufferSize);
+    crypto::aes128::encrypt_buffer_cbc(pOutputBuffer, ivCopy, pServerState->sessionEncryptionKey, bufferSize);
+    std::vector<uint8_t> encrypted;
+    encrypted.reserve(bufferSize);
+    for (size_t i = 0; i < bufferSize; i++) {
+        encrypted.push_back(*(pOutputBuffer + i));
+    }
+    auto encrypted_hash_bytes = Sha256Hasher::hash(encrypted);
+    for (size_t i = 0; i < bufferSize; i++) {
+        encrypted_hash_bytes.push_back(pServerState->sessionMACKey[i]);
+    }
+    auto mac = Sha256Hasher::hash(encrypted_hash_bytes);
+    memcpy(pMAC, mac.data(), 32);
+    return true;
+}
\ No newline at end of file
-- 
2.34.1


From e84e9035df907bad3d7a84171b8f2c7b72b88d0c Mon Sep 17 00:00:00 2001
Date: Tue, 21 Jun 2022 22:34:00 +0100
Subject: [PATCH 2/2] Fixed small bug

---
 barretenberg/task_lib.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/barretenberg/task_lib.cpp b/barretenberg/task_lib.cpp
index db33d992..70797ccb 100644
--- a/barretenberg/task_lib.cpp
+++ b/barretenberg/task_lib.cpp
@@ -45,7 +45,6 @@ extern "C" bool createSession(ServerState* pServerState, uint8_t* pPointCoordina
         g1::element(clientPoint * fr(2)).mul_without_endomorphism(pServerState->privateKey * fr(2).invert()));
     if (!sharedPoint.on_curve()) {
 
-        std::cout << "Shared: " << sharedPoint << std::endl;
         errorStream << "Shared point " << sharedPoint << " is not on curve" << std::endl;
         strcpy(pErrorMessage, errorStream.str().c_str());
 
@@ -85,7 +84,7 @@ extern "C" bool decryptWithSessionKey(ServerState* pServerState,
         encrypted.push_back(*(pInputBuffer + i));
     }
     auto encrypted_hash_bytes = Sha256Hasher::hash(encrypted);
-    for (size_t i = 0; i < bufferSize; i++) {
+    for (size_t i = 0; i < 32; i++) {
         encrypted_hash_bytes.push_back(pServerState->sessionMACKey[i]);
     }
     auto mac = Sha256Hasher::hash(encrypted_hash_bytes);
@@ -111,6 +110,7 @@ extern "C" bool encryptWithSessionKey(ServerState* pServerState,
     if (bufferSize < 16) {
         return false;
     }
+
     memcpy(ivCopy, pIV, 16);
     memcpy(pOutputBuffer, pInputBuffer, bufferSize);
     crypto::aes128::encrypt_buffer_cbc(pOutputBuffer, ivCopy, pServerState->sessionEncryptionKey, bufferSize);
@@ -120,7 +120,7 @@ extern "C" bool encryptWithSessionKey(ServerState* pServerState,
         encrypted.push_back(*(pOutputBuffer + i));
     }
     auto encrypted_hash_bytes = Sha256Hasher::hash(encrypted);
-    for (size_t i = 0; i < bufferSize; i++) {
+    for (size_t i = 0; i < 32; i++) {
         encrypted_hash_bytes.push_back(pServerState->sessionMACKey[i]);
     }
     auto mac = Sha256Hasher::hash(encrypted_hash_bytes);
-- 
2.34.1

